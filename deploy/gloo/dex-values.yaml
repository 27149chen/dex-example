config:
  # Set it to a valid URL
  issuer: http://dex.test.8slan.com/dex

  # See https://dexidp.io/docs/storage/ for more options
  storage:
    type: memory

  web:
    http: 0.0.0.0:5556

  staticClients:
    - id: example-app
      redirectURIs:
        - "http://example.test.8slan.com/callback"
      name: "Example App"
      secret: "ZXhhbXBsZS1hcHAtc2VjcmV0"
    - id: gloo
      name: "GlooApp"
      redirectURIs:
        - "http://1.117.135.124/callback"
      secret: secretvalue

  # Enable at least one connector
  # See https://dexidp.io/docs/connectors/ for more options
  connectors:
    - type: mockCallback
      id: mock
      name: Example
    - type: github
      # Required field for connector id.
      id: github
      # Required field for connector name.
      name: GitHub
      config:
        # Credentials can be string literals or pulled from the environment.
        clientID: "3fec3722f5e2b7ed3e7b"
        clientSecret: "6dbcf5c3ab1aeb4c97a45adbcf78dc640bd6b189"
        redirectURI: http://dex.test.8slan.com/dex/callback

        # Optional organizations and teams, communicated through the "groups" scope.
        #
        # NOTE: This is an EXPERIMENTAL config option and will likely change.
        #
        # Legacy 'org' field. 'org' and 'orgs' cannot be used simultaneously. A user
        # MUST be a member of the following org to authenticate with dex.
        # org: my-organization
        #
        # Dex queries the following organizations for group information if the
        # "groups" scope is provided. Group claims are formatted as "(org):(team)".
        # For example if a user is part of the "engineering" team of the "coreos"
        # org, the group claim would include "coreos:engineering".
        #
        # If orgs are specified in the config then user MUST be a member of at least one of the specified orgs to
        # authenticate with dex.
        #
        # If neither 'org' nor 'orgs' are specified in the config and 'loadAllGroups' setting set to true then user
        # authenticate with ALL user's Github groups. Typical use case for this setup:
        # provide read-only access to everyone and give full permissions if user has 'my-organization:admins-team' group claim.
#        orgs:
#          - name: my-organization
#            # Include all teams as claims.
#          - name: my-organization-with-teams
#            # A white list of teams. Only include group claims for these teams.
#            teams:
#              - red-team
#              - blue-team
        # Flag which indicates that all user groups and teams should be loaded.
#        loadAllGroups: false
        loadAllGroups: true

        # Optional choice between 'name' (default), 'slug', or 'both'.
        #
        # As an example, group claims for member of 'Site Reliability Engineers' in
        # Acme organization would yield:
        #   - ['acme:Site Reliability Engineers'] for 'name'
        #   - ['acme:site-reliability-engineers'] for 'slug'
        #   - ['acme:Site Reliability Engineers', 'acme:site-reliability-engineers'] for 'both'
        teamNameField: slug
        # flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
        # It is possible for a user to change their own user name but it is very rare for them to do so
        useLoginAsID: false
    - type: ldap
      # Required field for connector id.
      id: ldap
      # Required field for connector name.
      name: LDAP
      config:
        # Host and optional port of the LDAP server in the form "host:port".
        # If the port is not supplied, it will be guessed based on "insecureNoSSL",
        # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
        # otherwise.
        host: 172.16.0.23:389

        # Following field is required if the LDAP host is not using TLS (port 389).
        # Because this option inherently leaks passwords to anyone on the same network
        # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
        #
        insecureNoSSL: true

        # If a custom certificate isn't provide, this option can be used to turn on
        # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
        # of explorative phases.
        #
        insecureSkipVerify: true

        # When connecting to the server, connect using the ldap:// protocol then issue
        # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
        #
        # startTLS: true

        # Path to a trusted root certificate file. Default: use the host's root CA.
        # rootCA: /etc/dex/ldap.ca

        # A raw certificate file can also be provided inline.
        # rootCAData: ( base64 encoded PEM file )

        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        bindDN: cn=admin,dc=8slan,dc=com
        bindPW: eBC2K2EaE9va795Z

        # The attribute to display in the provided password prompt. If unset, will
        # display "Username"
        usernamePrompt: SSO Username

        # User search maps a username and password entered by a user to a LDAP entry.
        userSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=person)(uid=<username>))".
          baseDN: dc=8slan,dc=com
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=person)"

          # username attribute used for comparing user entries. This will be translated
          # and combined with the other filter as "(<attr>=<username>)".
          username: cn
          # The following three fields are direct mappings of attributes on the user entry.
          # String representation of the user.
          idAttr: cn
          # Required. Attribute to map to Email.
          emailAttr: email
          # Maps to display name of users. No default value.
          nameAttr: cn

        # Group search queries for groups given a user entry.
        groupSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=group)(member=<user uid>))".
          baseDN: dc=8slan,dc=com
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=group)"

          # Following list contains field pairs that are used to match a user to a group. It adds an additional
          # requirement to the filter that an attribute in the group must match the user's
          # attribute value.
          userMatchers:
            - userAttr: uid
              groupAttr: member

          # Represents group name.
          nameAttr: name

  # Let dex keep a list of passwords which can be used to login to dex.
  enablePasswordDB: true

  # A static list of passwords to login the end user. By identifying here, dex
  # won't look in its underlying storage for passwords.
  #
  # If this option isn't chosen users may be added through the gRPC API.
  staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
    - email: "user@example.com"
      # bcrypt hash of the string "password"
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "user"
      userID: "123456789-db88-4b73-90a9-3cd1661f5466"

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: koderover-nginx
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: dex.test.8slan.com
      paths:
        - path: /
          backend:
            serviceName: dex
            servicePort: 5556
          pathType: Prefix
